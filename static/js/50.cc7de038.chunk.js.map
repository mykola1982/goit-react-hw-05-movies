{"version":3,"file":"static/js/50.cc7de038.chunk.js","mappings":"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","sources":["api/tmdbAPI.js","utils/castMaper.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '941391c38298a3626ffc21c5189f1c8b';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrendingMovies = async () => {\n  const url = `trending/movie/day?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchSearchMovies = async query => {\n  const url = `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchDetailsMovie = async id => {\n  const url = `movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchCreditsMovies = async id => {\n  const url = `movie/${id}/credits?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchReviewsMovie = async id => {\n  const url = `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const { data } = await axios.get(url);\n  return data;\n};\n","export const castMaper = cast => {\n  return cast.map(({ id, character, name, profile_path }) => ({\n    id,\n    character,\n    name,\n    profile_path,\n  }));\n};\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  padding: 20px 0;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 15px;\n`;\n\nexport const Img = styled.img`\n  width: 150px;\n  height: auto;\n`;\nexport const Text = styled.p`\n  margin-top: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as API from '../../api/tmdbAPI';\nimport { IMAGE_URL } from 'api/tmdbAPI';\nimport { castMaper } from 'utils/castMaper';\nimport { Loader } from 'components/Loader';\n\nimport { Section, Item, Img, Text } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getCreditsMovies() {\n      try {\n        setIsLoading(true);\n        const credits = await API.fetchCreditsMovies(movieId);\n        const cast = castMaper(credits.cast);\n        setCast(cast);\n      } catch (error) {\n        setError({ error });\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getCreditsMovies();\n  }, [movieId]);\n\n  return (\n    <Section>\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\n      {isLoading && <Loader />}\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map(({ id, character, name, profile_path }) => (\n            <Item key={id}>\n              <Img\n                src={\n                  profile_path\n                    ? IMAGE_URL + profile_path\n                    : 'https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-'\n                }\n                alt={name}\n              />\n              <Text>\n                <b>Character: </b>\n                {character}\n              </Text>\n              <Text>\n                <b>Actor name: </b> {name}\n              </Text>\n            </Item>\n          ))}\n        </ul>\n      ) : (\n        <Text>No cast information available</Text>\n      )}\n    </Section>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const BackdropLoader = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 102, 0, 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  transition: opacity 250ms linear, visibility 250ms linear;\n`;\n\nexport const StyledLoader = styled.div`\n  margin: 0 auto;\n  display: inline-block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  translate: -50% -50%;\n`;\n","import { Watch } from 'react-loader-spinner';\nimport { BackdropLoader, StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <BackdropLoader>\n      <StyledLoader>\n        <Watch\n          height=\"200\"\n          width=\"200\"\n          radius=\"48\"\n          color=\"#FF6600\"\n          ariaLabel=\"watch-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      </StyledLoader>\n    </BackdropLoader>\n  );\n};\n"],"names":["axios","API_KEY","IMAGE_URL","fetchTrendingMovies","url","data","fetchSearchMovies","query","fetchDetailsMovie","id","fetchCreditsMovies","fetchReviewsMovie","castMaper","cast","map","character","name","profile_path","Section","styled","Item","Img","Text","movieId","useParams","useState","setCast","error","setError","isLoading","setIsLoading","useEffect","API","credits","getCreditsMovies","message","Loader","length","src","alt","BackdropLoader","StyledLoader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible"],"sourceRoot":""}